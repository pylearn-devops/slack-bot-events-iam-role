AWSTemplateFormatVersion: "2010-09-09"
Description: IAM role for Slack bot events

Parameters:
  IamRoleName:
    Type: String
    Description: Name of the IAM role
    Default: "slack-bot-events-role"
  OwnerContact:
    Type: String
    Description: Owner Contact
    Default: netaaakash@gmail.com

Resources: 
  SlackBotRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub ${IamRoleName}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Tags:
        - Key: Owner
          Value: !Ref OwnerContact

  SecretManagerPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      ManagedPolicyName: "slack-bot-events-secrets-manager-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: "*"
            Condition:
              ArnLike:
                aws:SourceArn: "arn:aws:lambda:*:564315557724:function:*"
      Roles: 
        - Ref: "SlackBotRole"

  CloudwatchLogsPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      ManagedPolicyName: "slack-bot-events-dynamodb-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - lambda:InvokeFunction
            Resource: "arn:aws:lambda:*:564315557724:function:*"
          - Effect: "Allow"
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
            Resource: "*"
      Roles: 
        - Ref: "SlackBotRole"
